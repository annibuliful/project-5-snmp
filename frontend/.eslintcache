[{"/Users/jarupongpajakgo/Desktop/project-5-network-management/frontend/src/index.tsx":"1","/Users/jarupongpajakgo/Desktop/project-5-network-management/frontend/src/reportWebVitals.ts":"2","/Users/jarupongpajakgo/Desktop/project-5-network-management/frontend/src/App.tsx":"3"},{"size":500,"mtime":1608731837330,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":1608731837346,"results":"6","hashOfConfig":"5"},{"size":6786,"mtime":1608826654447,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"13x0wjd",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/jarupongpajakgo/Desktop/project-5-network-management/frontend/src/index.tsx",[],["16","17"],"/Users/jarupongpajakgo/Desktop/project-5-network-management/frontend/src/reportWebVitals.ts",[],"/Users/jarupongpajakgo/Desktop/project-5-network-management/frontend/src/App.tsx",["18","19","20"],"import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport \"./App.css\";\nimport useSocket from \"use-socket.io-client\";\nimport { format, getMinutes } from \"date-fns\";\nconst ENDPOINT = \"http://localhost:3030\";\n\ninterface IReportData {\n  id: string;\n  oid: string;\n  name: string;\n  value: number;\n  rate: number;\n  average: number;\n  max: number;\n  counter: number;\n  createdAt: string;\n  ip: string;\n}\n\ninterface ISummaryData {\n  rate: number;\n  average: number;\n  max: number;\n  min: number;\n}\n\nconst App = () => {\n  //You can treat \"useSocket\" as \"io\"\n  const [socket] = useSocket(ENDPOINT, {\n    autoConnect: false,\n  });\n\n  const [dataSummary, setDataSummary] = useState<ISummaryData>({\n    rate: 0,\n    average: 0,\n    max: 0,\n    min: -1,\n  });\n\n  const [listData, setListData] = useState<IReportData[]>([\n    // {\n    //   id: \"_t5hv6Ik_Rt_UuAdEy2jH\",\n    //   oid: \"1.3.6.1.2.1.4.3.0\",\n    //   name: \"Inbound\",\n    //   value: 3994056,\n    //   rate: 0,\n    //   average: 0,\n    //   max: 0,\n    //   counter: 0,\n    //   createdAt: \"2020-12-23T13:54:14.103Z\",\n    // },\n  ]);\n  // const [dataChart, setDataChart] = useState({\n  //   labels: [\"Current\", \"Average\", \"Maximum\", \"Minimum\"],\n  //   datasets: [\n  //     {\n  //       label: \"SNMP DataSet\",\n  //       fill: false,\n  //       lineTension: 0.1,\n  //       backgroundColor: \"rgba(75,192,192,0.4)\",\n  //       borderColor: \"rgba(75,192,192,1)\",\n  //       borderCapStyle: \"butt\",\n  //       borderDash: [],\n  //       borderDashOffset: 0.0,\n  //       borderJoinStyle: \"miter\",\n  //       pointBorderColor: \"rgba(75,192,192,1)\",\n  //       pointBackgroundColor: \"#fff\",\n  //       pointBorderWidth: 1,\n  //       pointHoverRadius: 5,\n  //       pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n  //       pointHoverBorderColor: \"rgba(220,220,220,1)\",\n  //       pointHoverBorderWidth: 2,\n  //       pointRadius: 1,\n  //       pointHitRadius: 10,\n  //       data: [0, 0, 0, 0],\n  //     },\n  //   ],\n  // });\n\n  const [transferRateChart, setTransferRateChart] = useState({\n    labels: [],\n    datasets: [\n      {\n        label: \"SNMP Data transfer\",\n        fill: false,\n        lineTension: 0.1,\n        backgroundColor: \"rgba(75,192,192,0.4)\",\n        borderColor: \"rgba(75,192,192,1)\",\n        borderCapStyle: \"butt\",\n        borderDash: [],\n        borderDashOffset: 0.0,\n        borderJoinStyle: \"miter\",\n        pointBorderColor: \"rgba(75,192,192,1)\",\n        pointBackgroundColor: \"#fff\",\n        pointBorderWidth: 1,\n        pointHoverRadius: 5,\n        pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n        pointHoverBorderColor: \"rgba(220,220,220,1)\",\n        pointHoverBorderWidth: 2,\n        pointRadius: 1,\n        pointHitRadius: 10,\n        data: [],\n      },\n    ],\n  });\n\n  const onUpdateSummaryData = (data: IReportData) => {\n    const newData: ISummaryData = dataSummary;\n\n    if (newData[\"min\"] === -1) {\n      newData[\"min\"] = data.value;\n    } else {\n      if (newData[\"min\"] > data.value) {\n        newData[\"min\"] = data.value;\n      }\n    }\n\n    if (newData[\"max\"] < data.value) {\n      newData[\"max\"] = data.value;\n    }\n\n    newData[\"average\"] = data.average;\n    newData[\"rate\"] = data.rate;\n\n    setDataSummary(newData);\n  };\n  const onUpdateTransferRate = (timeStamp: string, value: number) => {\n    const labelMinute = Math.floor(getMinutes(new Date(timeStamp)) / 10);\n    // const label = `${format(new Date(timeStamp), \"d MMM yyyy\")}-${labelMinute}`;\n    const label = timeStamp;\n    setTransferRateChart((prev) => {\n      const listLabels = prev.labels;\n      const labelIndex = listLabels.findIndex((el) => el === label);\n      const temp = Object.assign(prev);\n      if (labelIndex === -1) {\n        temp.labels = [...temp.labels, label];\n        temp.datasets[0].data = [...temp.datasets[0].data, value];\n      } else {\n        temp.datasets[0].data[labelIndex] = value;\n      }\n      return temp;\n    });\n  };\n\n  // add event\n  useEffect(() => {\n    //connect socket\n    socket.connect();\n    socket.on(\"message\", (data: IReportData) => {\n      onUpdateTransferRate(data.createdAt, data.value);\n      onUpdateSummaryData(data);\n      // setDataChart((prev) => ({\n      //   ...prev,\n      //   datasets: [\n      //     {\n      //       ...prev.datasets[0],\n      //       data: [data.rate, data.average, data.max, 0],\n      //     },\n      //   ],\n      // }));\n\n      setListData((prev) => [data, ...prev]);\n    });\n  }, [socket]);\n\n  return (\n    <div className=\"App\">\n      {/* <Line\n        data={dataChart}\n        width={100}\n        height={400}\n        options={{ maintainAspectRatio: false }}\n      /> */}\n      <Line data={transferRateChart} />\n\n      <h4 style={{ marginTop: \"20px\" }}>Summary</h4>\n      <div style={{ margin: \"20px auto\", width: \"20vw\" }}>\n        {Object.keys(dataSummary).map((key) => {\n          return (\n            <div\n              style={{ display: \"grid\", gridTemplateColumns: \"repeat(2,1fr)\" }}\n              key={key}\n            >\n              <p>{key}</p>\n              <p>{dataSummary[key]}</p>\n            </div>\n          );\n        })}\n      </div>\n      <h4 style={{ marginTop: \"20px\" }}>Report Table</h4>\n      <div\n        style={{\n          display: \"grid\",\n          gridTemplateColumns: \"repeat(6,1fr)\",\n          margin: \"0 auto\",\n          width: \"80vw\",\n        }}\n      >\n        <div style={{ border: \"1px solid gray\", padding: \"20px\" }}>OID</div>\n        <div style={{ border: \"1px solid gray\", padding: \"20px\" }}>IP</div>\n        <div style={{ border: \"1px solid gray\", padding: \"20px\" }}>Name</div>\n        <div style={{ border: \"1px solid gray\", padding: \"20px\" }}>\n          Transfer Rate\n        </div>\n        <div style={{ border: \"1px solid gray\", padding: \"20px\" }}>\n          Transfer Value\n        </div>\n        <div style={{ border: \"1px solid gray\", padding: \"20px\" }}>\n          Timestamp\n        </div>\n      </div>\n      <div style={{ height: \"50vh\", overflow: \"scroll\" }}>\n        {listData.map(({ oid, name, value, rate, createdAt, ip }) => (\n          <div\n            key={createdAt}\n            style={{\n              display: \"grid\",\n              gridTemplateColumns: \"repeat(6,1fr)\",\n              width: \"80vw\",\n              margin: \"0 auto\",\n            }}\n          >\n            <div style={{ border: \"1px solid gray\" }}>{oid}</div>\n            <div style={{ border: \"1px solid gray\" }}>{ip}</div>\n            <div style={{ border: \"1px solid gray\" }}>{name}</div>\n            <div style={{ border: \"1px solid gray\" }}>{rate}</div>\n            <div style={{ border: \"1px solid gray\" }}>{value}</div>\n            <div style={{ border: \"1px solid gray\" }}>{createdAt}</div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n",{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","severity":1,"message":"26","line":5,"column":10,"nodeType":"27","messageId":"28","endLine":5,"endColumn":16},{"ruleId":"25","severity":1,"message":"29","line":129,"column":11,"nodeType":"27","messageId":"28","endLine":129,"endColumn":22},{"ruleId":"30","severity":1,"message":"31","line":165,"column":6,"nodeType":"32","endLine":165,"endColumn":14,"suggestions":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"@typescript-eslint/no-unused-vars","'format' is defined but never used.","Identifier","unusedVar","'labelMinute' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'onUpdateSummaryData'. Either include it or remove the dependency array.","ArrayExpression",["36"],"no-global-assign","no-unsafe-negation",{"desc":"37","fix":"38"},"Update the dependencies array to be: [onUpdateSummaryData, socket]",{"range":"39","text":"40"},[4466,4474],"[onUpdateSummaryData, socket]"]